PROJECT_NAME = fiap-hack
ENVIRONMENT = production
AWS_REGION = us-east-1
AWS_ACCOUNT_ID = 410211328905
ECR_REPOSITORY = $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(PROJECT_NAME)-$(ENVIRONMENT)
IMAGE_TAG = latest

.PHONY: build
build:
	@echo "üî® Construindo imagem Docker..."
	docker build -t $(PROJECT_NAME):$(IMAGE_TAG) .
	@echo "‚úÖ Imagem constru√≠da com sucesso!"

.PHONY: build-ecr
build-ecr:
	@echo "üî® Construindo imagem para ECR..."
	docker build -t $(ECR_REPOSITORY):$(IMAGE_TAG) .
	@echo "‚úÖ Imagem ECR constru√≠da com sucesso!"

.PHONY: login-ecr
login-ecr:
	@echo "üîê Fazendo login no ECR..."
	aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
	@echo "‚úÖ Login realizado com sucesso!"

.PHONY: push-ecr
push-ecr: login-ecr build-ecr
	@echo "üì§ Enviando imagem para ECR..."
	docker push $(ECR_REPOSITORY):$(IMAGE_TAG)
	@echo "‚úÖ Imagem enviada com sucesso!"

.PHONY: terraform-init
terraform-init:
	@echo "üöÄ Inicializando Terraform..."
	cd terraform && terraform init
	@echo "‚úÖ Terraform inicializado!"

.PHONY: terraform-plan
terraform-plan:
	@echo "üìã Gerando plano Terraform..."
	cd terraform && terraform plan -var-file="k8s.tfvars"
	@echo "‚úÖ Plano gerado!"

.PHONY: terraform-apply
terraform-apply:
	@echo "üöÄ Aplicando configura√ß√µes Terraform..."
	cd terraform && terraform apply -var-file="k8s.tfvars" -auto-approve
	@echo "‚úÖ Configura√ß√µes aplicadas!"

.PHONY: terraform-destroy
terraform-destroy:
	@echo "üóëÔ∏è Destruindo recursos Terraform..."
	cd terraform && terraform destroy -var-file="k8s.tfvars" -auto-approve
	@echo "‚úÖ Recursos destru√≠dos!"

.PHONY: terraform-output
terraform-output:
	@echo "üì§ Exibindo outputs Terraform..."
	cd terraform && terraform output
	@echo "‚úÖ Outputs exibidos!"

.PHONY: terraform-fmt
terraform-fmt:
	@echo "üé® Formatando arquivos Terraform..."
	cd terraform && terraform fmt -recursive
	@echo "‚úÖ Arquivos formatados!"

.PHONY: terraform-validate
terraform-validate:
	@echo "‚úÖ Validando configura√ß√£o Terraform..."
	cd terraform && terraform validate
	@echo "‚úÖ Configura√ß√£o v√°lida!"

.PHONY: k8s-status
k8s-status:
	@echo "üìä Status dos recursos Kubernetes..."
	kubectl get all -n video-processor
	@echo "‚úÖ Status exibido!"

.PHONY: k8s-logs
k8s-logs:
	@echo "üìù Exibindo logs da aplica√ß√£o..."
	kubectl logs -f deployment/video-processor -n video-processor
	@echo "‚úÖ Logs exibidos!"

.PHONY: k8s-describe
k8s-describe:
	@echo "üîç Descrevendo recursos Kubernetes..."
	kubectl describe deployment video-processor -n video-processor
	@echo "‚úÖ Descri√ß√£o exibida!"

.PHONY: k8s-port-forward
k8s-port-forward:
	@echo "üîó Configurando port-forward..."
	kubectl port-forward service/video-processor-service 8080:80 -n video-processor
	@echo "‚úÖ Port-forward configurado!"

.PHONY: k8s-scale
k8s-scale:
	@if [ -z "$(REPLICAS)" ]; then \
		echo "üí° Use: make k8s-scale REPLICAS=3"; \
	else \
		echo "üìà Escalando para $(REPLICAS) r√©plicas..."; \
		kubectl scale deployment video-processor --replicas=$(REPLICAS) -n video-processor; \
		echo "‚úÖ Deployment escalado!"; \
	fi

.PHONY: k8s-restart
k8s-restart:
	@echo "üîÑ Reiniciando deployment..."
	kubectl rollout restart deployment/video-processor -n video-processor
	@echo "‚úÖ Deployment reiniciado!"

.PHONY: k8s-rollback
k8s-rollback:
	@echo "‚è™ Fazendo rollback do deployment..."
	kubectl rollout undo deployment/video-processor -n video-processor
	@echo "‚úÖ Rollback conclu√≠do!"

.PHONY: deploy
deploy: push-ecr terraform-apply
	@echo "üöÄ Deploy completo realizado!"
	@echo "üìä Verificando status..."
	@make k8s-status

.PHONY: deploy-ecr-only
deploy-ecr-only: push-ecr
	@echo "üì¶ Apenas ECR atualizado!"

.PHONY: deploy-k8s-only
deploy-k8s-only: terraform-apply
	@echo "‚ò∏Ô∏è Apenas Kubernetes atualizado!"

.PHONY: dev-build
dev-build:
	@echo "üî® Construindo para desenvolvimento..."
	docker build -t $(PROJECT_NAME):dev .
	@echo "‚úÖ Build de desenvolvimento conclu√≠do!"

.PHONY: dev-run
dev-run: dev-build
	@echo "üöÄ Executando aplica√ß√£o em modo desenvolvimento..."
	docker run -p 3000:3000 --env-file .env $(PROJECT_NAME):dev
	@echo "‚úÖ Aplica√ß√£o executada!"

.PHONY: dev-stop
dev-stop:
	@echo "üõë Parando containers de desenvolvimento..."
	docker stop $$(docker ps -q --filter ancestor=$(PROJECT_NAME):dev) 2>/dev/null || true
	@echo "‚úÖ Containers parados!"

.PHONY: clean
clean:
	@echo "üßπ Limpando recursos..."
	docker system prune -f
	@echo "‚úÖ Limpeza conclu√≠da!"

.PHONY: clean-images
clean-images:
	@echo "üóëÔ∏è Removendo imagens Docker..."
	docker rmi $(PROJECT_NAME):$(IMAGE_TAG) $(PROJECT_NAME):dev 2>/dev/null || true
	@echo "‚úÖ Imagens removidas!"

.PHONY: help
help:
	@echo "üìö Comandos dispon√≠veis:"
	@echo ""
	@echo "üî® BUILD:"
	@echo "  build              - Construir imagem Docker"
	@echo "  build-ecr          - Construir imagem para ECR"
	@echo ""
	@echo "üì¶ ECR:"
	@echo "  login-ecr          - Login no ECR"
	@echo "  push-ecr           - Enviar imagem para ECR"
	@echo ""
	@echo "üèóÔ∏è TERRAFORM:"
	@echo "  terraform-init     - Inicializar Terraform"
	@echo "  terraform-plan     - Gerar plano Terraform"
	@echo "  terraform-apply    - Aplicar configura√ß√µes"
	@echo "  terraform-destroy  - Destruir recursos"
	@echo "  terraform-output   - Exibir outputs"
	@echo "  terraform-fmt      - Formatar arquivos"
	@echo "  terraform-validate - Validar configura√ß√£o"
	@echo ""
	@echo "‚ò∏Ô∏è KUBERNETES:"
	@echo "  k8s-status         - Status dos recursos"
	@echo "  k8s-logs           - Logs da aplica√ß√£o"
	@echo "  k8s-describe       - Descrever recursos"
	@echo "  k8s-port-forward   - Configurar port-forward"
	@echo "  k8s-scale          - Escalar deployment"
	@echo "  k8s-restart        - Reiniciar deployment"
	@echo "  k8s-rollback       - Fazer rollback"
	@echo ""
	@echo "üöÄ DEPLOY:"
	@echo "  deploy             - Deploy completo (ECR + K8s)"
	@echo "  deploy-ecr-only    - Apenas ECR"
	@echo "  deploy-k8s-only    - Apenas Kubernetes"
	@echo ""
	@echo "üîß DESENVOLVIMENTO:"
	@echo "  dev-build          - Build para desenvolvimento"
	@echo "  dev-run            - Executar em desenvolvimento"
	@echo "  dev-stop           - Parar containers de desenvolvimento"
	@echo ""
	@echo "üßπ LIMPEZA:"
	@echo "  clean              - Limpar recursos Docker"
	@echo "  clean-images       - Remover imagens Docker"
	@echo ""
	@echo "‚ùì AJUDA:"
	@echo "  help               - Exibir esta ajuda"