name: Deploy Aplica√ß√£o de Processamento de V√≠deo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'terraform/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: us-east-1
  BUCKET_NAME: fiap-hack-terraform-state
  PROJECT_NAME: fiap-hack
  ENVIRONMENT: production
  EKS_CLUSTER_NAME: fiap-hack-cluster
  AWS_ACCOUNT_ID: 410211328905
  ECR_REPOSITORY: 410211328905.dkr.ecr.us-east-1.amazonaws.com/fiap-hack-production

jobs:
  validar:
    name: Validar Terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configurar provider AWS
        working-directory: terraform
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Corrigir formata√ß√£o
        working-directory: terraform
        run: terraform fmt -recursive

      - name: Validar Terraform
        working-directory: terraform
        run: terraform validate

  build:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    needs: validar
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT



  build-test:
    name: Testar Build da Imagem Docker
    runs-on: ubuntu-latest
    needs: validar
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Build da imagem (sem push)
        run: |
          docker build -t fiap-hack-test:${{ github.sha }} .
          echo "‚úÖ Build da imagem realizado com sucesso!"

  plano:
    name: Gerar Plano de Mudan√ßas
    runs-on: ubuntu-latest
    needs: validar
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configurar kubectl para EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Configurar provider AWS
        working-directory: terraform
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Gerar plano
        working-directory: terraform
        run: terraform plan -out=service.tfplan

      - name: Salvar plano
        uses: actions/upload-artifact@v4
        with:
          name: service-tfplan
          path: terraform/service.tfplan
          retention-days: 1

  deploy:
    name: Aplicar Mudan√ßas na Infraestrutura
    runs-on: ubuntu-latest
    needs: [validar, plano]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Baixar c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configurar kubectl para EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Configurar provider AWS
        working-directory: terraform
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}

      - name: Baixar plano
        uses: actions/download-artifact@v4
        with:
          name: service-tfplan
          path: terraform/

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Aplicar mudan√ßas
        working-directory: terraform
        run: terraform apply -auto-approve service.tfplan

      - name: Aguardar deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/video-processor -n video-processor

      - name: Verificar status da aplica√ß√£o
        run: |
          echo "=== Status da Aplica√ß√£o ==="
          kubectl get pods -n video-processor
          kubectl get svc -n video-processor
          echo ""
          echo "LoadBalancer URL:"
          kubectl get svc video-processor-service -n video-processor -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "LoadBalancer ainda n√£o est√° pronto"

      - name: Testar health check
        run: |
          echo "=== Testando Health Check ==="
          LB_HOSTNAME=$(kubectl get svc video-processor-service -n video-processor -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          if [ -n "$LB_HOSTNAME" ]; then
            echo "Testando endpoint: http://$LB_HOSTNAME/health"
            curl -f http://$LB_HOSTNAME/health || echo "Health check falhou"
          else
            echo "LoadBalancer ainda n√£o est√° dispon√≠vel"
          fi

  notificar:
    name: Notificar Status do Deploy
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Notificar sucesso
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deploy da aplica√ß√£o conclu√≠do com sucesso!"
          echo "üê≥ Imagem: ${{ env.ECR_REPOSITORY }}:latest"
          echo "üåê LoadBalancer: $(kubectl get svc video-processor-service -n video-processor -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo 'N/A')"

      - name: Notificar falha
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Falha no deploy da aplica√ß√£o!"
          exit 1 