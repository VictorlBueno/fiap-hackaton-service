import { Injectable, Inject } from '@nestjs/common';
import { Video } from '../entities/video.entity';
import { ProcessingJob, JobStatus } from '../entities/processing-job.entity';
import {VideoProcessorPort} from "../ports/gateways/video-processor.port";
import {FileStoragePort} from "../ports/gateways/file-storage.port";
import {JobRepositoryPort} from "../ports/repositories/job-repository.port";

@Injectable()
export class VideoProcessingService {
    constructor(
        @Inject('VideoProcessorPort') private readonly videoProcessor: VideoProcessorPort,
        @Inject('FileStoragePort') private readonly fileStorage: FileStoragePort,
        @Inject('JobRepositoryPort') private readonly jobRepository: JobRepositoryPort,
    ) {}

    async processVideo(video: Video): Promise<ProcessingJob | null> {
        console.log(`üé¨ Iniciando processamento para usu√°rio ${video.userId}: ${video.originalName}`);

        // Atualizar status para processing no banco
        await this.jobRepository.updateJobStatus(
            video.id,
            JobStatus.PROCESSING,
            'Processando v√≠deo e extraindo frames...'
        );

        // Atualizar caminho do v√≠deo no banco
        await this.jobRepository.updateJobVideoPath(video.id, video.path);

        try {
            const videoExists = await this.fileStorage.fileExists(video.path);
            if (!videoExists) {
                await this.jobRepository.updateJobStatus(
                    video.id,
                    JobStatus.FAILED,
                    `Arquivo de v√≠deo n√£o encontrado: ${video.path}`
                );
                throw new Error(`Arquivo de v√≠deo n√£o encontrado: ${video.path}`);
            }

            const tempDir = `temp/${video.id}`;
            console.log(`üìÅ Criando diret√≥rio tempor√°rio: ${tempDir}`);

            const frames = await this.videoProcessor.extractFrames(video.path, tempDir);

            if (frames.length === 0) {
                await this.jobRepository.updateJobStatus(
                    video.id,
                    JobStatus.FAILED,
                    'Nenhum frame extra√≠do do v√≠deo'
                );
                throw new Error('Nenhum frame extra√≠do do v√≠deo');
            }

            console.log(`üì∏ Extra√≠dos ${frames.length} frames para usu√°rio ${video.userId}`);

            const zipFilename = `${video.id}.zip`; // Usar UUID direto
            const zipPath = `outputs/${zipFilename}`;
            console.log(`üì¶ Criando ZIP: ${zipPath}`);

            await this.fileStorage.createZip(frames, zipPath);

            const zipExists = await this.fileStorage.fileExists(zipPath);
            if (!zipExists) {
                await this.jobRepository.updateJobStatus(
                    video.id,
                    JobStatus.FAILED,
                    'Falha ao criar arquivo ZIP'
                );
                throw new Error('Falha ao criar arquivo ZIP');
            }

            console.log(`‚úÖ ZIP criado com sucesso: ${zipPath}`);

            // Atualizar para completed no banco
            await this.jobRepository.updateJobStatus(
                video.id,
                JobStatus.COMPLETED,
                `Processamento conclu√≠do! ${frames.length} frames extra√≠dos.`,
                {
                    frameCount: frames.length,
                    zipPath: zipFilename
                }
            );

            // Remover arquivo original
            await this.fileStorage.deleteFile(video.path);

            console.log(`‚úÖ Processamento conclu√≠do para usu√°rio ${video.userId}: ${video.id}`);

            // Retornar job atualizado do banco
            return await this.jobRepository.findJobById(video.id, video.userId);

        } catch (error) {
            console.error(`‚ùå Erro no processamento para usu√°rio ${video.userId}:`, error.message);

            await this.jobRepository.updateJobStatus(
                video.id,
                JobStatus.FAILED,
                error.message
            );

            throw error;
        }
    }
}